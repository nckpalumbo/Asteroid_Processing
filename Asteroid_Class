class Asteroid
{
  //Variables
  PVector position, velocity, rotation;
  float radius, spin;
  PImage images[], image;
  
  //Constructor
  public Asteroid(PVector pos, float rad, PImage[] pics)
  {
    radius = rad;
    position = pos;
    spin = (float)(Math.random() * 0.025);
    float angle = random(2 * PI);
    
    velocity = new PVector(cos(angle), sin(angle));
    velocity.mult(2500 / (radius*radius));
    angle = random(2 * PI);
    rotation = new PVector(cos(angle), sin(angle));
    
    int rand = (int)(Math.random() * 2.5);
    images = pics;
    image = pics[rand];
  }
  
  //Split asteroid into smaller ones
  void breakApart(ArrayList<Asteroid> asteroids)
  {
    if(radius <= 30)
      asteroids.remove(this);
    else if(radius < 35)
    {
      for(int i = 0; i < 1; i++) //Break up once
      {
        float angle = random(2 * PI);
        PVector randVec = new PVector(radius * sin(angle), radius * cos(angle));
        randVec.add(position);
        asteroids.add(new Asteroid(randVec, radius * .8, images));
      }
      asteroids.remove(this);
    }
    else
    {
      for(int i = 0; i < 3; i++) //Break up 2x
      {
        float angle = random(2 * PI);
        PVector randVec = new PVector(radius * sin(angle), radius * cos(angle));
        randVec.add(position);
        asteroids.add(new Asteroid(randVec, radius * .8, images));
      }
      asteroids.remove(this);
    }
  }
  
  //Movement
  void move()
  {
    position.add(velocity);
    rotateTo(rotation, spin); //Spins asteroid
  }
  
  //Rotation/Direction
  float headingTo(PVector vec)
  {
    //Like Clock ICE
    return(float)(Math.atan2(vec.y, vec.x)); 
  }
  
  //Circle underneath image
  void circle(float x, float y)
  {
    pushMatrix();
    translate(x, y);
    rotate(headingTo(rotation) + PI/2);
    image(image, -radius, -radius, radius * 2, radius * 2);
    popMatrix();
  }
  
  //Display
  void display()
  {
    fill(100);
    circle(position.x, position.y);
    if(position.x < radius)
      circle(position.x + width, position.y);
    else if(position.x > width - radius)
      circle(position.x - width, position.y);
    if(position.y < radius)
      circle(position.x, position.y + height);
    else if(position.y > height - radius)
      circle(position.x, position.y - height);
  }
  
  //Bounds - wrap asteroids
  void bounds()
  {
    if (position.x < 0)
      position.x = width;
    if (position.y < 0) 
      position.y = height;
    if (position.x > width) 
      position.x = 0;
    if (position.y > height)
      position.y = 0;
  }
  
  //Rotate
  void rotateTo(PVector vect, float angleTemp) 
  {
    float temp = vect.x;
    vect.x = vect.x * cos(angleTemp) - vect.y * sin(angleTemp);
    vect.y = temp * sin(angleTemp) + vect.y * cos(angleTemp);
  }

}
